Patch Notes > version 0.5 - ~Stellar Drive~

>> Done <<
//# Create timer!//
//# Virtual sprites to replace pygame sprite group//
//# Creation of Virtual class//
//# Virtual Rework//
//# Added layer freezer option to Virtuals//
//# Create Game Window//
//# Create game pause window//
//# Use new freeze for game pause//
//# Create sprites//
//# Create Main menue//
//# Create Load Screen//
//# Create File Loader//
//# Added scrolling to map//
//# Map_offset sharing//
//# Fix click//
//# Hangar.py creation//
//# AI_System creation//
//# Mechanics review / patch//
//# Create Save Game//
//# Rework db_assign (much faster)//
//# Option sound lvl pitch//
//# Rework quit method with save all//
//# Game Pause//
//# All Bases//
//# Units spawn (map limits)//
//# Pause menu//
//# Unit AI//
//# Added Upgrade menu//
//# AI for player2//
//# Added lvl manager//
//# Work on spawn button//
//# Add endge proximity mouse scroll//
//# Create projectile collision//
//# Create death//
//# Create AI for vehicle drive//
//# Create Saved Session manager//
//# Create Assembly//
//# Create Upgrade//
//# Create Projectile and Vehicle AI//
//# Redesign + Remove archive//
//# Optimisation/Overhaul//
//# Catalogue all functions//


>> Reminder <<
to do : QnA + expl. db. management + Question about check solution

Tank: Tank is just a vessel for type and upgrades (life etc)
- life is not dependant on type but on upgrade lvl


>> Work in progress <<
# Add resolution selection dropdown menu
# Load screen loading bar
# Create Mouse Class with Selection (include drop and drag?/ or click and select(green))
# Create collision animation
# Create collision damage
# Create/implement level manager
#> Upgrade and Assembly in one ?




>> Technical notions <<
//#> Solution in overarching AI systems//

1 check(2,3,4) - 1
2 check(3,4) - 2
3 check(4) - 3
4 - 4

Check count 6 against normal fashion 12 all vs all (dubble performance)
Hypothetical function:
1 check from 2 to max_total
2 check from 3 to max_total
[...]
max_total do not check



Vectors:
pos = vec(x, y)
spd = vec(x, y)
acc = vec(x, y)

acc = vec(0, 0)
acc = vec(0.1, 0)

acc += spd * -friction (! is negative !)
spd += acc
pos += spd.rotate(°)



# Layering:

#0 : Map
#1 : Base (Calculation)
#2 : Tanks(Calculation)
#3 : Tank Parts
#4 : Base Parts
#5 : Balistic/Kinetic
#6 : Effects > trail
#7 : Game Frame / Buttons
#8 : Pause menu/Equip menu
#9 : Transition ou classes particulières
#10 : Vital loops
#11 : 
#12 : 
#13 : 
#14 : 

# Tree of imports:

#Main
^
|
#Display
^
|
#Game
^
|
#Hangar
^
|
#Sprites
^
|
#AI_System
^
|
#Settings
^
|
#File_Loader


Base:
x = [1,3]
cannon_1_lvl : 1 - 10 (affects range, fire speed,)
cannon_1_research: 1 - 3
cannon_1_equiped: 1 or 2 or 3

base_armor : 1 - 10

for every vehicle add a new lvl:
ex:
rover_1_upgrade

Rover: 5
Rocket: 4
Panther: 4
Flak: 5
Tanker: 4


Inof suplémentaires:

Oral Bac 13-14 Juin 2019
